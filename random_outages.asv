% FUNCTION:	Data-adaptive algorithm with fluctuation in reactance
% USAGE:	nAll	: number of measurements
%			xSigMax	: reactance fluctuation level
% MODIFIED:	Sep 16
clear
define_constants;
global DEG M_NOMINAL IF_OBS
global Bus
DEG = 1; % degree
M_NOMINAL = 2; % nominal value of M
IF_OBS = 3; % if-observed tag

%% Operation perameter
% make all parameters random
nAll = 50; % number of meansurements
arr_xSig = [0.15 0.2 0.25 0.3 0.35]; % reactance fluctuation level
n_xNoi = 10; %10; % realization of noise
n_pNoi = 5;

%% Simulation parameters
nPer = 5; % number of measurements each time instant
kappa = 1; % upperbound of the total number of concurrently anomalous lines
pSig = 0.01; % power noise level

%% Start
mpc_init = loadcase('case118');
nBus = size(mpc_init.bus,1); % number of buses(node)
nBranch = size(mpc_init.branch,1); % number of branches(edge)
Unsucc_Br = [7,9,113,133,134,176,177,183,184];
Succ_Br = setdiff(1:nBranch,Unsucc_Br);

%% Graph matrices: incidence matrix, Bus(DEG,M_MEAN), and Nbr
[IncMat,B,Bus,Nbr,SortDegIdx,iRefBus] = graphMat(mpc_init);

%% Single line outage
cntAll = 0; % accumulate during iteration
cntAcc = 0; % count of ERROR cases (bad recovery)
arr_pAcc = zeros(size(arr_xSig));
for i_xSig = 1:length(arr_xSig)
	start_time = datestr(now,13);
	xSig = arr_xSig(i_xSig);
	for i_xNoi = 1:n_xNoi
		mpc_x = mpc_init; % backtracking needs more time

		xRange = (2*xSig).*rand(nBranch,1) + repmat((1-xSig),nBranch,1); % (1-xSig,1+xSig)
		mpc_x.branch(:,BR_X) = mpc_x.branch(:,BR_X) .* xRange;

		[mpr_x,~] = runopf(mpc_x,mpoption('verbose',0,'out.all',0));
		pre_theta = mpr_x.bus(:,VA) * pi / 180; % all phasor angles
		pre_theta = pre_theta - repmat(pre_theta(iRefBus),nBus,1);
		
		arr_Branch = Succ_Br(randperm(length(Succ_Br),20)); % randperm > datasample; no sort.
		for iBranch = arr_Branch
			mpc_xp = mpc_x;
			mpc_xp.branch(iBranch,:) = []; % branch iBr breaks down
			for i_pNoi = 1:n_pNoi
				pNoise = pSig * mean(mpc_xp.bus(:,PD)) * randn(nBus,1); % randn(nBus,1);
				mpc_xp.bus(:,PD) = mpc_xp.bus(:,PD) + pNoise;			

				% run optimal power flow simulation
				[mpr_xp,succ] = runopf(mpc_xp,mpoption('verbose',0,'out.all',0));
				if ~succ
					break; % this topology is disconnected, go to next
				end
				post_theta = mpr_xp.bus(:,VA) * pi / 180;
				post_theta = post_theta - repmat(post_theta(iRefBus),nBus,1);
				diff_theta = post_theta - pre_theta;

				% data-acquisition and decision-making
				Bus(:,IF_OBS) = 0;
				Buff = SortDegIdx(1:nPer)'; % init dynamic measurement buffer
				Bus(Buff,IF_OBS) = 1; % tag these buses as 'observed'
				Obs = []; % observed buses
				Repo = []; % observed but not expanded buses, just like a repository    
				cntTime = 0;
				while 1
					cntTime = cntTime + 1;
					Obs = [Obs Buff];
					Repo = [Repo Buff];

					% sparse coefficient reconstruction: SVD & OMP
					[~,pos,~] = reconstr(B,IncMat,Obs,diff_theta,kappa); 

					if length(Obs) >= nAll % number of measurements are fixed
						break; % 100 internal buses
					end

					% choose buses for next measurement
					[Buff,~] = nextObs(nPer,diff_theta,Nbr,Repo);
				end % end of data-acquisition and decision-making

				cntAll = cntAll + 1;
				if pos(1) == iBranch
					cntAcc = cntAcc +  1;
				end
			end
% 			[iBranch pos(1)]
		end
		[i_xSig i_xNoi]
	end % for each branch
	pAcc = cntAcc / cntAll
	arr_pAcc(i_xSig) = pAcc;
	%% Output file header
	fid = fopen('accuracy_log.txt','a');
	fprintf(fid, ['Start: ',start_time,' - Stop: ',datestr(now,13),'\n']);
	fprintf(fid, 'Measurements: %d\tn_xNoi: %d\tn_pNoi: %d\n',nAll,n_xNoi,n_pNoi);
	fprintf(fid, 'xSig: %d%%\t\t\tAccuracy: %f%%\n',xSig*100,pAcc*100);
	fprintf(fid,'\n');
	fclose(fid);
end

	